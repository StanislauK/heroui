import DefaultLayout from "@/layouts/default";
import {Tabs, Tab} from "@heroui/tabs";
import React from "react";
import { getRestaurants, Restaurant } from "@/lib/supabase";
import { RestaurantMenuModal } from "@/components/RestaurantMenuModal";

export default function RestaurantsPage() {
  const [selectedTab, setSelectedTab] = React.useState<string>("map");
  const [selectedRestaurant, setSelectedRestaurant] = React.useState<Restaurant | null>(null);
  const [isMenuModalOpen, setIsMenuModalOpen] = React.useState(false);

  const openMenuModal = (restaurant: Restaurant) => {
    setSelectedRestaurant(restaurant);
    setIsMenuModalOpen(true);
  };

  const closeMenuModal = () => {
    setIsMenuModalOpen(false);
    setSelectedRestaurant(null);
  };

  return (
    <DefaultLayout>
      <div className="min-h-full bg-gradient-to-br from-orange-50 to-yellow-50 -mx-6">
        {/* Toolbar —Å —Ç–∞–±–∞–º–∏ */}
        <div className="bg-white/90 backdrop-blur-sm border-b border-gray-200 shadow-sm sticky top-0 z-20">
          <div className="flex justify-center py-4">
            <Tabs 
              aria-label="Restaurants view" 
              variant={"solid"} 
              size={"lg"}
              selectedKey={selectedTab}
              onSelectionChange={(key) => setSelectedTab(key as string)}
            >
              <Tab key="map" title="–ö–∞—Ä—Ç–∞" />
              <Tab key="list" title="–°–ø–∏—Å–æ–∫" />
              <Tab key="favorites" title="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" />
            </Tabs>
          </div>
        </div>
        
                       {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
               <div className="px-4">
                 {selectedTab === "map" && <MapContent onShowMenu={openMenuModal} />}
                 {selectedTab === "list" && <ListContent onShowMenu={openMenuModal} />}
                 {selectedTab === "favorites" && <FavoritesContent />}
               </div>
              </div>
        
        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ */}
        <RestaurantMenuModal
          isOpen={isMenuModalOpen}
          onClose={closeMenuModal}
          restaurant={selectedRestaurant}
        />
      </DefaultLayout>
    );
  }

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (–∑–∞–Ω–∏–º–∞–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω)
function MapContent({ onShowMenu }: { onShowMenu: (restaurant: Restaurant) => void }) {
  const [restaurants, setRestaurants] = React.useState<Restaurant[]>([]);
  const [loading, setLoading] = React.useState(true);

  React.useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
    const fetchRestaurants = async () => {
      try {
        const { data, error } = await getRestaurants();
        if (error) throw error;
        setRestaurants(data || []);
      } catch (err) {
        console.error('Error fetching restaurants:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchRestaurants();
  }, []);

  React.useEffect(() => {
    if (restaurants.length === 0) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Yandex Maps API
    const script = document.createElement('script');
    script.src = 'https://api-maps.yandex.ru/2.1/?apikey=e1e4aa3e-70a6-4b00-8470-d34f8aff4689&lang=ru_RU';
    script.async = true;
    
    script.onload = () => {
      // @ts-ignore
      window.ymaps.ready(() => {
        // @ts-ignore
        const map = new window.ymaps.Map('yandex-map', {
          center: [53.902284, 27.561831], // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–∏–Ω—Å–∫–∞
          zoom: 12,
          controls: ['zoomControl', 'fullscreenControl']
        }, {
          searchControlProvider: 'yandex#search'
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurants.forEach((restaurant) => {
          if (restaurant.latitude && restaurant.longitude) {
            // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
            const balloonContent = `
              <div style="padding: 10px; min-width: 200px;">
                <h3 style="margin: 0 0 8px 0; font-weight: 600; color: #1f2937;">${restaurant.name}</h3>
                ${restaurant.address ? `<p style="margin: 0 0 8px 0; color: #6b7280; font-size: 14px;">üìç ${restaurant.address}</p>` : ''}
                <button 
                  onclick="window.showRestaurantMenu('${restaurant.id}')" 
                  style="
                    background: #3b82f6; 
                    color: white; 
                    border: none; 
                    padding: 8px 16px; 
                    border-radius: 6px; 
                    cursor: pointer; 
                    font-size: 14px;
                    width: 100%;
                  "
                  onmouseover="this.style.background='#2563eb'"
                  onmouseout="this.style.background='#3b82f6'"
                >
                  –°–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é
                </button>
              </div>
            `;

            // @ts-ignore
            const placemark = new window.ymaps.Placemark(
              [restaurant.latitude, restaurant.longitude],
              {
                balloonContent: balloonContent,
                hintContent: restaurant.name
              },
              {
                preset: 'islands#redDotIcon',
                iconColor: '#ef4444'
              }
            );

            map.geoObjects.add(placemark);
          }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–∫–∏
        // @ts-ignore
        window.showRestaurantMenu = (restaurantId: string) => {
          const restaurant = restaurants.find(r => r.id === restaurantId);
          if (restaurant) {
            onShowMenu(restaurant);
          }
        };
      });
    };

    document.head.appendChild(script);

    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (document.head.contains(script)) {
        document.head.removeChild(script);
      }
      // @ts-ignore
      if (window.showRestaurantMenu) {
        // @ts-ignore
        delete window.showRestaurantMenu;
      }
    };
  }, [restaurants]);

  if (loading) {
    return (
      <div className="h-[calc(100vh-120px)] -mx-4 -my-4 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üó∫Ô∏è</div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-[calc(100vh-120px)] -mx-4 -my-4">
      <div id="yandex-map" className="w-full h-full"></div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ (—Å –æ—Ç—Å—Ç—É–ø–æ–º —Å–≤–µ—Ä—Ö—É)
function ListContent({ onShowMenu }: { onShowMenu: (restaurant: Restaurant) => void }) {
  const [restaurants, setRestaurants] = React.useState<Restaurant[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);

  React.useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        setLoading(true);
        const { data, error } = await getRestaurants();
        if (error) throw error;
        setRestaurants(data || []);
      } catch (err: any) {
        setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤');
        console.error('Error fetching restaurants:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchRestaurants();
  }, []);

  if (loading) {
    return (
      <div className="space-y-4 pt-6">
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">–°–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π</h2>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã...</p>
        </div>
        <div className="flex justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="space-y-4 pt-6">
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
          <p className="text-red-600">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4 pt-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">–°–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π</h2>
        <p className="text-gray-600">–ù–∞–π–¥–µ–Ω–æ {restaurants.length} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤</p>
      </div>
      
      {restaurants.map((restaurant) => (
        <div key={restaurant.id} className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-[1.02]">
          <div className="flex items-start gap-4">
            <div className="text-4xl">üçΩÔ∏è</div>
            <div className="flex-1 min-w-0">
              <h3 className="font-semibold text-lg text-gray-800 mb-1">{restaurant.name}</h3>
              {restaurant.description && (
                <p className="text-gray-600 text-sm mb-2 line-clamp-2">{restaurant.description}</p>
              )}
              {restaurant.address && (
                <p className="text-gray-500 text-sm mb-1">üìç {restaurant.address}</p>
              )}
              {restaurant.phone && (
                <p className="text-gray-500 text-sm">üìû {restaurant.phone}</p>
              )}
            </div>
            <div className="text-right flex-shrink-0">
              <div className="flex items-center gap-1 text-yellow-500 mb-2">
                <span>‚≠ê</span>
                <span className="font-semibold text-lg">{restaurant.rating}</span>
              </div>
              <div className="text-sm text-gray-600">
                <p>üïí {restaurant.delivery_time_min}-{restaurant.delivery_time_max} –º–∏–Ω</p>
                <p className="text-blue-600 font-medium">üí∞ –û—Ç {restaurant.min_order_amount} ‚ÇΩ</p>
              </div>
              <div className={`mt-2 px-2 py-1 rounded-full text-xs ${
                restaurant.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
              }`}>
                {restaurant.is_active ? '–û—Ç–∫—Ä—ã—Ç–æ' : '–ó–∞–∫—Ä—ã—Ç–æ'}
              </div>
            </div>
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é" */}
          <div className="mt-4 pt-4 border-t border-gray-200">
            <button
              onClick={() => onShowMenu(restaurant)}
              className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors font-medium"
            >
              –°–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é
            </button>
          </div>
        </div>
      ))}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (—Å –æ—Ç—Å—Ç—É–ø–æ–º —Å–≤–µ—Ä—Ö—É)
function FavoritesContent() {
  const favorites = [
    { id: 1, name: "Pizza Palace", lastOrder: "2 –¥–Ω—è –Ω–∞–∑–∞–¥", emoji: "üçï" },
    { id: 2, name: "Sushi Master", lastOrder: "–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥", emoji: "üç£" },
  ];

  return (
    <div className="space-y-4 pt-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è</h2>
        <p className="text-gray-600">–í–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã</p>
      </div>
      
      {favorites.length > 0 ? (
        favorites.map((restaurant) => (
          <div key={restaurant.id} className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg">
            <div className="flex items-center gap-4">
              <div className="text-4xl">{restaurant.emoji}</div>
              <div className="flex-1">
                <h3 className="font-semibold text-lg text-gray-800">{restaurant.name}</h3>
                <p className="text-gray-600 text-sm">–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {restaurant.lastOrder}</p>
              </div>
              <button className="px-4 py-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors">
                –£–±—Ä–∞—Ç—å
              </button>
            </div>
          </div>
        ))
      ) : (
        <div className="bg-white/80 backdrop-blur-sm rounded-xl p-8 text-center">
          <div className="text-6xl mb-4">‚ù§Ô∏è</div>
          <h3 className="text-xl font-semibold text-gray-800 mb-2">–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö</h3>
          <p className="text-gray-600">–î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏—Ö</p>
        </div>
      )}
    </div>
  );
}
