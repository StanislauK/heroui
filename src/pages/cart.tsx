import { title } from "@/components/primitives";
import DefaultLayout from "@/layouts/default";
import { useTelegram } from "@/hooks/useTelegram";
import { getCartItemsByTelegramId, updateCartItemQuantity, removeFromCart, createOrder, addOrderItems, clearCartAfterOrder, getOrders } from "@/lib/supabase";
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

interface CartItem {
  id: string;
  quantity: number;
  menu_item: {
    id: string;
    name: string;
    description?: string;
    price: number;
    image_url?: string;
    category?: string;
  };
  restaurant: {
    id: string;
    name: string;
    address?: string;
  };
}

export default function CartPage() {
  const { user: telegramUser } = useTelegram();
  const navigate = useNavigate();
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [orderLoading, setOrderLoading] = useState(false);
  const [hasActiveOrder, setHasActiveOrder] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (telegramUser) {
      loadCart();
      checkActiveOrders();
    } else {
      setLoading(false);
    }
  }, [telegramUser]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const checkActiveOrders = async () => {
    if (!telegramUser) return;

    try {
      const { data: orders, error } = await getOrders(`telegram_${telegramUser.id}`);
      
      if (error) {
        console.error('Error checking orders:', error);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ completed –∏–ª–∏ cancelled
      const activeOrders = orders?.filter(order => 
        order.status !== 'completed' && order.status !== 'cancelled'
      ) || [];

      setHasActiveOrder(activeOrders.length > 0);
    } catch (err) {
      console.error('Error checking active orders:', err);
    }
  };

  const loadCart = async () => {
    if (!telegramUser) return;

    try {
      setLoading(true);
      setError(null);
      
      const { data, error } = await getCartItemsByTelegramId(telegramUser.id);
      
      if (error) throw error;
      
      setCartItems(data || []);
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
      console.error('Error loading cart:', err);
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
  const handleQuantityChange = async (cartItemId: string, change: number) => {
    const item = cartItems.find(item => item.id === cartItemId);
    if (!item) return;

    const newQuantity = Math.max(0, item.quantity + change);
    
    if (newQuantity === 0) {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
      await handleRemoveItem(cartItemId);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      try {
        const { error } = await updateCartItemQuantity(cartItemId, newQuantity);
        if (error) throw error;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setCartItems(prev => prev.map(item => 
          item.id === cartItemId 
            ? { ...item, quantity: newQuantity }
            : item
        ));
      } catch (err: any) {
        console.error('Error updating quantity:', err);
      }
    }
  };

  // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const handleRemoveItem = async (cartItemId: string) => {
    try {
      const { error } = await removeFromCart(cartItemId);
      if (error) throw error;
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setCartItems(prev => prev.filter(item => item.id !== cartItemId));
    } catch (err: any) {
      console.error('Error removing item:', err);
    }
  };

  // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
  const handleCreateOrder = async () => {
    if (!telegramUser || cartItems.length === 0) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if (hasActiveOrder) {
      alert('–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞');
      return;
    }

    try {
      setOrderLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞)
      const restaurantId = cartItems[0].restaurant.id;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const { data: order, error: orderError } = await createOrder(
        telegramUser.id,
        restaurantId,
        totalAmount
      );

      if (orderError) throw orderError;

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
      const orderItems = cartItems.map(item => ({
        menu_item_id: item.menu_item.id,
        quantity: item.quantity,
        price: item.menu_item.price
      }));

      const { error: itemsError } = await addOrderItems(order.id, orderItems);
      if (itemsError) throw itemsError;

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      await clearCartAfterOrder(telegramUser.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCartItems([]);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
      navigate('/orders');
      
    } catch (err: any) {
      console.error('Error creating order:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setOrderLoading(false);
    }
  };

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
  const totalAmount = cartItems.reduce((sum, item) => 
    sum + (item.menu_item.price * item.quantity), 0
  );

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
  const itemsByRestaurant = cartItems.reduce((groups, item) => {
    const restaurantId = item.restaurant.id;
    if (!groups[restaurantId]) {
      groups[restaurantId] = {
        restaurant: item.restaurant,
        items: []
      };
    }
    groups[restaurantId].items.push(item);
    return groups;
  }, {} as Record<string, { restaurant: any, items: CartItem[] }>);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  const hasMultipleRestaurants = Object.keys(itemsByRestaurant).length > 1;

  if (!telegramUser) {
    return (
      <DefaultLayout>
        <div className="min-h-full bg-gradient-to-br from-blue-50 to-cyan-50 -mx-6">
          <section className="flex flex-col items-center justify-center gap-4 py-8 md:py-10">
            <div className="inline-block max-w-lg text-center justify-center">
              <div className="text-6xl mb-4">üîê</div>
              <h1 className={title()}>–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h1>
              <p className="text-gray-600 mt-2">
                –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É
              </p>
            </div>
          </section>
        </div>
      </DefaultLayout>
    );
  }

  if (loading) {
    return (
      <DefaultLayout>
        <div className="min-h-full bg-gradient-to-br from-blue-50 to-cyan-50 -mx-6">
          <section className="flex flex-col items-center justify-center gap-4 py-8 md:py-10">
            <div className="inline-block max-w-lg text-center justify-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
              <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É...</p>
            </div>
          </section>
        </div>
      </DefaultLayout>
    );
  }

  if (error) {
    return (
      <DefaultLayout>
        <div className="min-h-full bg-gradient-to-br from-blue-50 to-cyan-50 -mx-6">
          <section className="flex flex-col items-center justify-center gap-4 py-8 md:py-10">
            <div className="inline-block max-w-lg text-center justify-center">
              <div className="text-6xl mb-4">‚ùå</div>
              <h1 className={title()}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
              <p className="text-red-600 mt-2">{error}</p>
              <button 
                onClick={loadCart}
                className="mt-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          </section>
        </div>
      </DefaultLayout>
    );
  }

  if (cartItems.length === 0) {
    return (
      <DefaultLayout>
        <div className="min-h-full bg-gradient-to-br from-blue-50 to-cyan-50 -mx-6">
          <section className="flex flex-col items-center justify-center gap-4 py-8 md:py-10">
            <div className="inline-block max-w-lg text-center justify-center">
              <div className="text-6xl mb-4">üõí</div>
              <h1 className={title()}>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h1>
              <p className="text-gray-600 mt-2">
                –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É
              </p>
            </div>
          </section>
        </div>
      </DefaultLayout>
    );
  }

  return (
    <DefaultLayout>
      <div className="min-h-full bg-gradient-to-br from-blue-50 to-cyan-50 -mx-6">
        <div className="px-4 py-3">
          {/* <h1 className={title({ size: "lg" })}>–ö–æ—Ä–∑–∏–Ω–∞</h1> */}
          
          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ */}
          {hasMultipleRestaurants && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-center gap-2">
                <div className="text-red-600">‚ö†Ô∏è</div>
                <div className="text-sm text-red-800">
                  <p className="font-medium">–í –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤</p>
                  <p>–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</p>
                </div>
              </div>
            </div>
          )}

          {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º */}
          <div className="space-y-6 mt-2">
            {Object.values(itemsByRestaurant).map(({ restaurant, items }) => (
              <div key={restaurant.id} className="bg-white rounded-xl shadow-sm border border-gray-100">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ */}
                <div className="p-4 border-b border-gray-100 bg-gray-50 rounded-t-xl">
                  <h3 className="text-lg font-semibold text-gray-800">{restaurant.name}</h3>
                  {restaurant.address && (
                    <p className="text-sm text-gray-600">üìç {restaurant.address}</p>
                  )}
                </div>
                
                {/* –¢–æ–≤–∞—Ä—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ */}
                <div className="p-4 space-y-4">
                  {items.map((item) => (
                    <div key={item.id} className="flex items-start gap-4">
                      {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ –±–ª—é–¥–∞ */}
                      <div className="w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 rounded-lg flex items-center justify-center flex-shrink-0">
                        {item.menu_item.image_url ? (
                          <img 
                            src={item.menu_item.image_url} 
                            alt={item.menu_item.name}
                            className="w-full h-full object-cover rounded-lg"
                          />
                        ) : (
                          <div className="text-2xl">üçΩÔ∏è</div>
                        )}
                      </div>
                      
                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ */}
                      <div className="flex-1 min-w-0">
                        <h4 className="font-semibold text-gray-800 text-lg mb-1">
                          {item.menu_item.name}
                        </h4>
                        {item.menu_item.description && (
                          <p className="text-gray-600 text-sm leading-relaxed">
                            {item.menu_item.description}
                          </p>
                        )}

                      </div>
                      
                      {/* –¶–µ–Ω–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º */}
                      <div className="flex flex-col items-end gap-3 flex-shrink-0">
                        <p className="text-xl font-bold text-blue-600">
                          {item.menu_item.price} ‚ÇΩ
                        </p>
                        
                        {/* –ö–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ */}
                        <div className="flex items-center gap-2">
                          <button 
                            onClick={() => handleQuantityChange(item.id, -1)}
                            className="w-7 h-7 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full flex items-center justify-center transition-colors font-medium text-sm"
                          >
                            -
                          </button>
                          <span className="w-7 h-7 bg-blue-500 text-white rounded-full flex items-center justify-center font-semibold text-sm">
                            {item.quantity}
                          </span>
                          <button 
                            onClick={() => handleQuantityChange(item.id, 1)}
                            className="w-7 h-7 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full flex items-center justify-center transition-colors font-medium text-sm"
                          >
                            +
                          </button>
                        </div>
                        

                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
          
          {/* –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="mt-8">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-semibold text-gray-800">–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</h3>
              <span className="text-2xl font-bold text-blue-600">{totalAmount} ‚ÇΩ</span>
            </div>
            
            <button 
              onClick={handleCreateOrder}
              disabled={orderLoading || hasActiveOrder || hasMultipleRestaurants}
              className={`w-full py-3 px-4 rounded-lg transition-colors font-medium ${
                hasActiveOrder || hasMultipleRestaurants
                  ? 'bg-gray-400 text-gray-600 cursor-not-allowed' 
                  : 'bg-blue-500 text-white hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed'
              }`}
            >
              {orderLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...' : 
               hasActiveOrder ? '–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' : 
               hasMultipleRestaurants ? '–£–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
            </button>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∑–∞–∫–∞–∑–µ */}
            {hasActiveOrder && (
              <div className="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-center gap-2">
                  <div className="text-yellow-600">‚ö†Ô∏è</div>
                  <div className="text-sm text-yellow-800">
                    <p className="font-medium">–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑</p>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞</p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </DefaultLayout>
  );
}
